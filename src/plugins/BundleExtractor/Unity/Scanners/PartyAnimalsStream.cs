using System.IO;
using System.Linq;
using System.Text;
using ZoDream.Shared.IO;

namespace ZoDream.BundleExtractor.Unity.Scanners
{
    public class PartyAnimalsStream : DeflateStream
    {
        public PartyAnimalsStream(Stream stream, string fileName) : base(stream)
        {
            _baseStream = stream;
            var table = new int[] { 0x8C, 0xE8, 0x93, 0xEB, 0xD1, 0xF0, 0x82, 0xCF, 0x9A, 0xBB, 0xEF, 0xB8, 0xC7, 0xA8, 0x8E, 0xDB, 0x96, 0x80, 0xAD, 0xC2, 0x86, 0xD8, 0x81, 0xFA, 0xE6, 0xAF, 0xD0, 0x9E, 0x95, 0xFE, 0xF6, 0x88, 0xF8, 0x85, 0xE4, 0xBC, 0xB6, 0xA4, 0xCB, 0xE3, 0xE0, 0x9F, 0xD3, 0xA7, 0xA3, 0xFF, 0x9C, 0x9D, 0xEE, 0xDE, 0xC9, 0xB0, 0xD5, 0xBE, 0x89, 0xF4, 0xBF, 0xED, 0xD9, 0xBA, 0xA5, 0xCE, 0x94, 0xC5, 0xCC, 0x90, 0xC8, 0xBD, 0x92, 0xB7, 0xF7, 0x97, 0x9B, 0xAB, 0xB4, 0xE9, 0xA6, 0xAC, 0xA9, 0xB2, 0xC1, 0xE5, 0xA1, 0xA0, 0xC4, 0xDC, 0xEC, 0xFD, 0xC0, 0xF3, 0xD2, 0xB3, 0x98, 0x8B, 0xD6, 0xB5, 0xE7, 0xAE, 0xC3, 0xE1, 0xB1, 0xF5, 0xA2, 0xE2, 0xF2, 0xAA, 0xF9, 0x99, 0xD4, 0x84, 0xFC, 0x8D, 0xF1, 0xDF, 0xB9, 0xD7, 0xDA, 0x91, 0xCA, 0x83, 0xEA, 0x8F, 0xCD, 0xDD, 0xC6, 0x87, 0xFB, 0x8A };

            var name = Path.GetFileNameWithoutExtension(fileName);
            var nameBytes = Encoding.UTF8.GetBytes(name);

            _key = (byte)(0x7C ^ nameBytes.Aggregate((a, b) => (byte)(a ^ b)));
            _beginPosition = table[nameBytes.Aggregate((a, b) => (byte)(a + b)) % table.Length];
        }

        private readonly Stream _baseStream;
        private readonly long _beginPosition;
        private readonly byte _key;

        public override int Read(byte[] buffer, int offset, int count)
        {
            var pos = Position;
            var res = _baseStream.Read(buffer, offset, count);
            if (res + Position < _beginPosition)
            {
                return res;
            }
            for (var i = 0; i < res; i++)
            {
                var j = pos + i;
                if (j >= _beginPosition)
                {
                    buffer[offset + i] ^= (byte)(_key ^ i / 8 + 1);
                }
            }
            return res;
        }
    }
}
